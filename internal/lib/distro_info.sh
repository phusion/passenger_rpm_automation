#!/bin/bash
# DO NOT EDIT!!
# 
# This file is automatically generated from internal/lib/distro_info.sh.erb,
# and definitions from internal/lib/docker_image_info.sh.
#
# Edit those and regenerate distro_info.sh by running:
# internal/scripts/regen_distro_info_script.sh
DEFAULT_DISTROS="el7 el8 el9"


function get_buildbox_image()
{
  echo "phusion/passenger_rpm_automation_buildbox:2.0.6"
}

function el_name_to_distro_name()
{
	local EL="$1"

	if [[ "$EL" =~ ^el[0-7]$ ]]; then
		echo centos${EL#"el"}
	elif [[ "$EL" =~ ^el([8-9]|[1-9][0-9]+)$ ]]; then
		echo rocky${EL#"el"}
	else
		echo "ERROR: unknown distribution name." >&2
		return 1
	fi
}

function distro_name_to_el_name()
{
	local DISTRIBUTION="$1"

	if [[ "$DISTRIBUTION" =~ ^centos[0-9]+$ ]]; then
		echo el${DISTRIBUTION#"centos"}
	elif [[ "$DISTRIBUTION" =~ ^rocky[0-9]+$ ]]; then
		echo el${DISTRIBUTION#"rocky"}
	else
		echo "ERROR: unknown distribution name." >&2
		return 1
	fi
}

function distro_name_to_testbox_image()
{
	local DISTRIBUTION="$1"
	if [[ "$DISTRIBUTION" =~ ^centos[0-9]+$ ]]; then
		echo phusion/passenger_rpm_automation_testbox_centos_${DISTRIBUTION#"centos"}:2.0.6
	elif [[ "$DISTRIBUTION" =~ ^rocky[0-9]+$ ]]; then
		echo phusion/passenger_rpm_automation_testbox_rocky_${DISTRIBUTION#"rocky"}:2.0.6
	else
		echo "ERROR: unknown distribution name." >&2
		return 1
	fi
}

function dynamic_module_supported()
{
	local CODENAME=$(distro_name_to_el_name "$1")

	
		if [[ "$CODENAME" = "el7" ]]; then
			echo true
			return
		fi
	
		if [[ "$CODENAME" = "el8" ]]; then
			echo true
			return
		fi
	
		if [[ "$CODENAME" = "el9" ]]; then
			echo true
			return
		fi
	

	echo false
}

function latest_nginx_for_distro()
{
        local CODENAME=$(distro_name_to_el_name "$1")

        
	if [[ "$CODENAME" = "el7" ]]; then
			echo "1.20.1"
			return
		fi
	
	if [[ "$CODENAME" = "el8" ]]; then
			echo "1.22.1"
			return
		fi
	
	if [[ "$CODENAME" = "el9" ]]; then
			echo "1.24.0"
			return
		fi
	
}

function nginx_minor_version()
{
	 cut -d. -f 1-2 <<< $1
}
