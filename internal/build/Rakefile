require_relative 'rakefile_support'
require_relative '../lib/tracking'

initialize_rakefile!
initialize_tracking_database!(SHOW_OVERVIEW_PERIODICALLY)


##### Source tarballs and initialization #####

register_tracking_category(:preparation, 'Preparation')

namespace :source do
  DISTROS.each do |distro|
    register_tracking_task(:preparation, "passenger:#{distro}")
    desc "Create Passenger source tarball"
    if dynamic_module_supported?(distro)
      task("passenger:#{distro}" => :nginx) do
        track_task(:preparation, "passenger:#{distro}") do |task|
          if FETCH_PASSENGER_TARBALL_FROM_CACHE && File.exist?("/cache/#{distro}_#{PASSENGER_TARBALL}")
            task.sh "cp /cache/#{distro}_#{PASSENGER_TARBALL} #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL}"
          else
            available_nginx_version = latest_nginx_version(distro)
            if ! File.exist?("/cache/nginx_#{available_nginx_version}.source.tar.gz")
              task.sh "./download-nginx-orig-tarball.sh #{available_nginx_version} #{RPM_SOURCES_DIR}/nginx_#{available_nginx_version}.source.tar.gz"
              task.sh "cp #{RPM_SOURCES_DIR}/nginx_#{available_nginx_version}.source.tar.gz /cache/"
            end
            task.sh "cp /cache/nginx_#{available_nginx_version}.source.tar.gz #{RPM_SOURCES_DIR}/nginx-#{available_nginx_version}.tar.gz"
            task.sh "./build-passenger-source-tarball.sh #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL} #{available_nginx_version}"
            task.sh "cp #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL} /cache/#{distro}_#{PASSENGER_TARBALL}"
          end
        end
      end
    else
      task("passenger:#{distro}" => :nginx) do
        track_task(:preparation, "passenger:#{distro}") do |task|
          if FETCH_PASSENGER_TARBALL_FROM_CACHE && File.exist?("/cache/#{PASSENGER_TARBALL}")
            task.sh "cp /cache/#{PASSENGER_TARBALL} #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL}"
          else
            task.sh "./build-passenger-source-tarball.sh #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL} #{NGINX_VERSION}"
            task.sh "cp #{RPM_SOURCES_DIR}/#{PASSENGER_TARBALL} /cache/#{PASSENGER_TARBALL}"
          end
        end
      end
    end
  end

  register_tracking_task(:preparation, 'nginx')
  desc "Create Nginx source tarball"
  task :nginx do
    track_task(:preparation, 'nginx') do |task|
      if File.exist?("/cache/#{NGINX_TARBALL}") && File.exist?("/cache/#{NGINX_TARBALL}.asc")
        task.sh "cp /cache/#{NGINX_TARBALL} #{RPM_SOURCES_DIR}/"
        task.sh "cp /cache/#{NGINX_TARBALL}.asc #{RPM_SOURCES_DIR}/"
      else
        task.sh "./download-nginx-orig-tarball.sh #{NGINX_VERSION} #{RPM_SOURCES_DIR}/#{NGINX_TARBALL}"
        task.sh "cp #{RPM_SOURCES_DIR}/#{NGINX_TARBALL} /cache/"
        task.sh "cp #{RPM_SOURCES_DIR}/#{NGINX_TARBALL}.asc /cache/"
      end
    end
  end

  register_tracking_task(:preparation, 'packaging_additions')
  desc "Copy over various packaging sources"
  task :packaging_additions do
    track_task(:preparation, 'packaging_additions') do |task|
      task.sh "cp -R /system/specs/passenger/* /system/specs/nginx/* #{RPM_SOURCES_DIR}/"
    end
  end
end


##### Source RPMs #####

register_tracking_category(:srpm, 'Building source RPMs')

namespace :srpm do
  ### Passenger ###

  desc "Build Passenger SRPMs for all distributions"
  task "passenger:all"

  DISTROS.each do |distro_id|
    distro = DISTRO_BUILD_PARAMS[distro_id]

    task "passenger:all" => "passenger:#{distro_id}"

    register_tracking_task(:srpm, "passenger:#{distro_id}")
    desc "Build Passenger SRPM for #{distro[:name]}"
    task("passenger:#{distro_id}" => ["source:passenger:#{distro_id}", 'source:nginx', 'source:packaging_additions']) do
      track_task(:srpm, "passenger:#{distro_id}") do |task|
        spec_target_dir  = "#{RPM_SPECS_DIR}/#{distro_id}"
        spec_target_file = "#{spec_target_dir}/#{PASSENGER_RPM_NAME}.spec"

        task.sh "mkdir -p #{spec_target_dir}"
        task.log "Preprocessing specfile"
        begin
          Preprocessor.new.start("/system/specs/passenger/passenger.spec.erb",
            spec_target_file,
            :distribution => distro_id)
        rescue Exception => e
          task.log "Specfile preprocessing failed"
          raise e
        end

        task.sh "rpmbuild -bs --root ~/rpmbuild/root-passenger-#{distro_id} #{spec_target_file}"
        ARCHITECTURES.each do |arch|
          task.sh "mkdir -p /work/#{distro_id}-#{arch}"
          task.sh "cp #{RPM_SRPMS_DIR}/#{passenger_srpm_name(distro_id)} /work/#{distro_id}-#{arch}/"
        end
      end
    end
  end

  ### Nginx ###

  desc "Build Nginx SRPMs for all distributions"
  task "nginx:all"

  DISTROS.each do |distro_id|
    next if dynamic_module_supported?(distro_id)
    distro = DISTRO_BUILD_PARAMS[distro_id]

    task "nginx:all" => "nginx:#{distro_id}"

    register_tracking_task(:srpm, "nginx:#{distro_id}")
    desc "Build Nginx SRPM for #{distro[:name]}"
    task("nginx:#{distro_id}" => ["source:passenger:#{distro_id}", 'source:nginx', 'source:packaging_additions']) do
      track_task(:srpm, "nginx:#{distro_id}") do |task|
        spec_target_dir  = "#{RPM_SPECS_DIR}/#{distro_id}"
        spec_target_file = "#{spec_target_dir}/#{NGINX_RPM_NAME}.spec"

        task.sh "mkdir -p #{spec_target_dir}"
        task.log "Preprocessing specfile"
        begin
          Preprocessor.new.start("/system/specs/nginx/nginx.spec.erb",
            spec_target_file,
            :distribution => distro_id)
        rescue Exception => e
          task.log "Specfile preprocessing failed"
          raise e
        end

        task.sh "rpmbuild -bs --root ~/rpmbuild/root-nginx-#{distro_id} #{spec_target_file}"
        ARCHITECTURES.each do |arch|
          task.sh "mkdir -p /work/#{distro_id}-#{arch}"
          task.sh "cp #{RPM_SRPMS_DIR}/#{nginx_srpm_name(distro_id)} /work/#{distro_id}-#{arch}/"
        end
      end
    end
  end
end


##### Binary RPMs #####

register_tracking_category(:rpm, 'Building binary RPMs')

namespace :rpm do
  desc "Build RPMs for all distributions and all architectures"
  task :all

  ### Passenger ###

  desc "Build Passenger RPMs for all distributions and all architectures"
  task "passenger:all"

  DISTROS.each do |distro_id|
    distro = DISTRO_BUILD_PARAMS[distro_id]

    ARCHITECTURES.each do |arch|
      next if !distro_architecture_allowed?(distro_id, arch)

      task "all" => "^rpm:passenger:#{distro_id}:#{arch}"
      task "passenger:all" => "^rpm:passenger:#{distro_id}:#{arch}"
      register_tracking_task(:rpm, "passenger:#{distro_id}:#{arch}")

      desc "Build Passenger RPM for #{distro[:name]}, #{arch}"
      task("passenger:#{distro_id}:#{arch}" => ["srpm:passenger:#{distro_id}"]) do
        track_task(:rpm, "passenger:#{distro_id}:#{arch}") do |task|
          mock_chroot_name = "#{distro[:mock_chroot_name]}-#{arch}"
          task.sh "/usr/bin/mock --verbose #{MOCK_FLAGS} " +
            "-r #{mock_chroot_name} " +
            "--resultdir '/work/#{distro_id}-#{arch}' " +
            "--uniqueext passenger-#{distro_id}-#{arch} " +
            "--enable-plugin=ccache " +
            "--rebuild /work/#{distro_id}-#{arch}/#{passenger_srpm_name(distro_id)}"
        end
      end
    end
  end

  ### Nginx ###

  desc "Build Nginx RPMs for all distributions and all architectures"
  task "nginx:all"

  DISTROS.each do |distro_id|
    next if dynamic_module_supported?(distro_id)
    distro = DISTRO_BUILD_PARAMS[distro_id]

    ARCHITECTURES.each do |arch|
      next if !distro_architecture_allowed?(distro_id, arch)

      task "all" => "^rpm:nginx:#{distro_id}:#{arch}"
      task "nginx:all" => "^rpm:nginx:#{distro_id}:#{arch}"
      register_tracking_task(:rpm, "nginx:#{distro_id}:#{arch}")

      desc "Build Nginx RPM for #{distro[:name]}, #{arch}"
      task("nginx:#{distro_id}:#{arch}" => ["srpm:nginx:#{distro_id}"]) do
        track_task(:rpm, "nginx:#{distro_id}:#{arch}") do |task|
          mock_chroot_name = "#{distro[:mock_chroot_name]}-#{arch}"
          task.sh "/usr/bin/mock --verbose #{MOCK_FLAGS} " +
            "-r #{mock_chroot_name} " +
            "--resultdir '/work/#{distro_id}-#{arch}' " +
            "--uniqueext nginx-#{distro_id}-#{arch} " +
            "--enable-plugin=ccache " +
            "--rebuild /work/#{distro_id}-#{arch}/#{nginx_srpm_name(distro_id)}"
        end
      end
    end
  end
end


##### Misc #####

task :clear_work_dir do
  sh "rm -rf /work/*"
end

task :start do
  initialize_tracking_database_logs!
end

task :finish do
  puts
  puts "Finished"
  TRACKING_DB.monitor.synchronize do
    TRACKING_DB.set_finished!
    dump_tracking_database
  end

  puts
  puts "Committing build products to output directory..."
  sh "rm -rf /output/*"
  DISTROS.each do |distro_id|
    files = Dir["/work/#{distro_id}-*/*.rpm"]
    if files.any?
      sh "mkdir -p /output/#{distro_id}"
      ARCHITECTURES.each do |arch|
        next if !distro_architecture_allowed?(distro_id, arch)
        sh "cp /work/#{distro_id}-#{arch}/*.rpm /output/#{distro_id}/"
      end
    end
  end
end
