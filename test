#!/bin/bash
set -e

SELFDIR=$(dirname "$0")
SELFDIR=$(cd "$SELFDIR" && pwd)
# shellcheck source=internal/lib/library.sh
source "$SELFDIR/internal/lib/library.sh"
# shellcheck source=internal/lib/distro_info.sh
source "$SELFDIR/internal/lib/distro_info.sh"

PASSENGER_DIR=
DISTRIBUTION=
OUTPUT_DIR=
CACHE_DIR=
DEBUG_CONSOLE=false
DEBUG_CONSOLE_ON_FAIL=false
PASSENGER_ENTERPRISE_LICENSE_KEY=
JENKINS=false

function usage()
{
	echo "Usage: ./test [OPTIONS]"
	echo "Test built packages."
	echo
	echo "Required options:"
	echo "  -p DIR     Path to Passenger source code"
	echo "  -x DISTRO  Distribution to run tests in: centos7,rocky8,rocky9"
	echo "  -d DIR     Path to built packages"
	echo "  -c DIR     Path to cache directory"
	echo "  -a ARCH    Test only given architecture: x86_64 or aarch64"
	echo
	echo "Optional options:"
	echo "  -O         Open debugging console instead of running test script"
	echo "  -D         Open debugging console on test failure"
	echo "  -e         Use the given Passenger Enterprise license key"
	echo "  -j         Indicate that this script is run from a Jenkins job"
	echo
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "p:a:x:d:c:ODe:jh" opt; do
		case "$opt" in
		p)
			PASSENGER_DIR="$OPTARG"
			;;
		a)
			ARCH="$OPTARG"
			;;
		x)
			DISTRIBUTION="$OPTARG"
			;;
		d)
			OUTPUT_DIR="$OPTARG"
			;;
		c)
			CACHE_DIR="$OPTARG"
			;;
		O)
			DEBUG_CONSOLE=true
			;;
		D)
			DEBUG_CONSOLE_ON_FAIL=true
			;;
		e)
			PASSENGER_ENTERPRISE_LICENSE_KEY="$OPTARG"
			;;
		j)
			JENKINS=true
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true

	if [[ "$PASSENGER_DIR" = "" ]]; then
		echo "ERROR: please specify a Passenger source directory with -p."
		exit 1
	fi
	if [[ "$ARCH" = "" ]]; then
		echo "ERROR: please specify a machine architecture with -a."
		exit 1
	fi
	if [[ "$ARCH" = "x86_64" ]]; then
		PLAT="linux/amd64"
	elif [[ "$ARCH" = "aarch64" ]]; then
		PLAT="linux/arm64"
	else
		echo "ERROR: please specify a valid machine architecture with -a."
		exit 1
	fi
	if [[ "$DISTRIBUTION" = "" ]]; then
		echo "ERROR: please specify a distribution with -x."
		exit 1
	else
		TEST_IMAGE=`distro_name_to_testbox_image "$DISTRIBUTION"`
		DYNAMIC_MODULE_SUPPORTED=`dynamic_module_supported "$DISTRIBUTION"`
	fi
	if [[ "$OUTPUT_DIR" = "" ]]; then
		echo "ERROR: please specify a build products directory with -d."
		exit 1
	fi
	if [[ "$CACHE_DIR" = "" ]]; then
		echo "ERROR: please specify a cache directory with -c."
		exit 1
	fi
}

parse_options "$@"
PASSENGER_DIR="`absolute_path \"$PASSENGER_DIR\"`"
OUTPUT_DIR="`absolute_path \"$OUTPUT_DIR\"`"
CACHE_DIR="`absolute_path \"$CACHE_DIR\"`"

EXTRA_ARGS=()
if [[ "$PASSENGER_ENTERPRISE_LICENSE_KEY" != "" ]]; then
	PASSENGER_ENTERPRISE_LICENSE_KEY="`absolute_path \"$PASSENGER_ENTERPRISE_LICENSE_KEY\"`"
	EXTRA_ARGS+=(-v "$PASSENGER_ENTERPRISE_LICENSE_KEY:/etc/passenger-enterprise-license:ro")
fi
if tty -s; then
	EXTRA_ARGS+=(-t -i)
fi
if [[ -e /sys/kernel/security/apparmor ]]; then
	EXTRA_ARGS+=(--security-opt=apparmor:unconfined)
fi

run mkdir -p "$CACHE_DIR/test-$DISTRIBUTION/yumcache"

echo "-------- Entering Docker container --------"
exec docker run \
	--rm \
	--platform "$PLAT" \
	-v "$SELFDIR/internal:/system/internal:ro" \
	-v "$PASSENGER_DIR:/passenger:ro" \
	-v "$OUTPUT_DIR:/output:ro" \
	-v "$CACHE_DIR:/cache" \
	-v "$CACHE_DIR/test-$DISTRIBUTION/yumcache:/var/cache/yum" \
	"${EXTRA_ARGS[@]}" \
	-e "DISTRIBUTION=$DISTRIBUTION" \
	-e "DYNAMIC_MODULE_SUPPORTED=$DYNAMIC_MODULE_SUPPORTED" \
	-e "DEBUG_CONSOLE=$DEBUG_CONSOLE" \
	-e "DEBUG_CONSOLE_ON_FAIL=$DEBUG_CONSOLE_ON_FAIL" \
	-e "JENKINS=$JENKINS" \
	-e "ARCHITECTURE=$ARCH" \
	-e "APP_UID=`/usr/bin/id -u`" \
	-e "APP_GID=`/usr/bin/id -g`" \
	--platform "linux/$(dpkg --print-architecture)" \
	$TEST_IMAGE \
	/system/internal/scripts/my_init --quiet --skip-runit --skip-startup-files -- \
	/system/internal/scripts/inituidgid.sh \
	/system/internal/test/misc/init.sh \
	/system/internal/test/test.sh
